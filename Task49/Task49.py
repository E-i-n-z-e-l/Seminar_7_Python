# Задача №49.
# Планеты вращаются вокруг звезд по эллиптическим орбитам. Назовем самой далекой планетой ту, орбита которой имеет
# самую большую площадь. Напишите функцию find_farthest_orbit(list_of_orbits), которая среди списка орбит
# планет найдет ту, по которой вращается самая далекая планета. Круговые орбиты не учитывайте: вы знаете, что у
# вашей звезды таких планет нет, зато искусственные спутники были были запущены на круговые орбиты. Результатом
# функции должен быть кортеж, содержащий длины полуосей эллипса орбиты самой далекой планеты. Каждая орбита
# представляет из себя кортеж из пары чисел - полуосей ее эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b,
# где a и b - длины полуосей эллипса. При решении задачи используйте списочные выражения. Подсказка: проще всего
# будет найти эллипс в два шага: сначала вычислить самую большую площадь эллипса, а затем найти и сам эллипс,
# имеющий такую площадь. Гарантируется, что самая далекая планета ровно одна

# Ввод:
# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# print(*find_farthest_orbit(orbits))
# Вывод:
# 2.5 10


def find_farthest_orbit(orbits):
    elips = list(filter(lambda i: i[0] != i[1], orbits))    # Убираем все круги, то есть те значения, которые равны между собой
    tmp_s = elips[0][0] * elips[0][1]                       # Объявляем первый кортеж(2 числа в скобках) дополнительной переменной, с которой будем сравнивать остальные
    max = 0                                                 # Индекс максимального кортежа
    for i in range(1, len(elips)):                          # Начинаем со второго кортежа, так как уже объявили первый максимальным
        if elips[i][0] * elips[i][1] > tmp_s:
            tmp_s = elips[i][0] * elips[i][1]
            max = i
    return elips[max]


orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
print(*find_farthest_orbit(orbits))






